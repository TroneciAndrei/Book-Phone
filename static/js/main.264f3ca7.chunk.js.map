{"version":3,"sources":["index.js"],"names":["PhoneBookForm","props","initContact","id","userFirstname","userLastname","userPhone","useState","userState","setUserState","handleUserChange","e","target","name","value","onSubmit","preventDefault","addUser","className","type","onChange","InformationTable","sortedContacts","users","sort","a","b","localeCompare","display","length","map","user","index","colSpan","Application","setUsers","ReactDOM","render","document","getElementById"],"mappings":"4LAIA,SAASA,EAAcC,GACrB,IAAMC,EAAc,CAClBC,GAAI,KACJC,cAAe,GACfC,aAAc,GACdC,UAAW,IAGb,EAAkCC,mBAASL,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KAEMC,EAAmB,SAACC,GACxBF,EAAa,2BACRD,GADO,kBAETG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAW9B,OACE,uBAAMC,SARa,SAACJ,GACpBA,EAAEK,iBACGR,EAAUJ,eAAkBI,EAAUH,cAAiBG,EAAUF,YACtEL,EAAMgB,QAAQT,GACdC,EAAaP,KAIb,UACE,gDACA,uBACA,uBAAQgB,UAAU,gBAAgBL,KAAK,gBAAgBM,KAAK,OAAOL,MAAON,EAAUJ,cAAegB,SAAUV,IAC7G,uBACA,+CACA,uBACA,uBAAQQ,UAAU,eAAeL,KAAK,eAAeM,KAAK,OAAOL,MAAON,EAAUH,aAAce,SAAUV,IAC1G,uBACA,2CACA,uBACA,uBAAQQ,UAAU,YAAYL,KAAK,YAAYM,KAAK,OAAOL,MAAON,EAAUF,UAAWc,SAAUV,IACjG,uBACA,uBAAQQ,UAAU,eAAeC,KAAK,SAASL,MAAM,gBAK3D,SAASO,EAAiBpB,GACxB,IAAMqB,EAAiBrB,EAAMsB,MAAMC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEpB,aAAasB,cAAcD,EAAErB,iBAE3EuB,EACJN,EAAeO,OAAS,EACtBP,EAAeQ,KAAI,SAACC,EAAMC,GAAP,OACjB,+BACE,6BAAMD,EAAK3B,gBACX,6BAAM2B,EAAK1B,eACX,6BAAM0B,EAAKzB,cAHJ0B,MAOX,6BACE,oBAAIC,QAAS,EAAb,oBAIN,OACE,wBAAQf,UAAU,mBAAlB,UACE,gCACE,+BACE,4CACA,2CACA,4CAGJ,gCAAQU,OAKd,SAASM,EAAYjC,GACnB,IAEA,EAA0BM,mBAFT,IAEjB,mBAAOgB,EAAP,KAAcY,EAAd,KAOA,OACE,oCACE,cAACnC,EAAD,CAAeiB,QAPH,SAACc,GACfA,EAAK5B,GAAKoB,EAAMM,OAAS,EACzBM,EAAS,GAAD,mBAAKZ,GAAL,CAAYQ,QAMlB,cAACV,EAAD,CAAkBE,MAAOA,OAK/Ba,IAASC,OAAO,cAACH,EAAD,IAAiBI,SAASC,eAAe,W","file":"static/js/main.264f3ca7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n\nfunction PhoneBookForm(props) {\n  const initContact = {\n    id: null,\n    userFirstname: \"\",\n    userLastname: \"\",\n    userPhone: \"\",\n  };\n\n  const [userState, setUserState] = useState(initContact);\n\n  const handleUserChange = (e) => {\n    setUserState({\n      ...userState,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!userState.userFirstname || !userState.userLastname || !userState.userPhone) return;\n    props.addUser(userState);\n    setUserState(initContact);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>First name:</label>\n      <br />\n      <input  className=\"userFirstname\" name=\"userFirstname\" type=\"text\" value={userState.userFirstname} onChange={handleUserChange} />\n      <br />\n      <label>Last name:</label>\n      <br />\n      <input  className=\"userLastname\" name=\"userLastname\" type=\"text\" value={userState.userLastname} onChange={handleUserChange} />\n      <br />\n      <label>Phone:</label>\n      <br />\n      <input  className=\"userPhone\" name=\"userPhone\" type=\"text\" value={userState.userPhone} onChange={handleUserChange} />\n      <br />\n      <input  className=\"submitButton\" type=\"submit\" value=\"Add User\" />\n    </form>\n  );\n}\n\nfunction InformationTable(props) {\n  const sortedContacts = props.users.sort((a, b) => a.userLastname.localeCompare(b.userLastname));\n\n  const display =\n    sortedContacts.length > 0 ? (\n      sortedContacts.map((user, index) => (\n        <tr key={index}>\n          <td >{user.userFirstname}</td>\n          <td >{user.userLastname}</td>\n          <td >{user.userPhone}</td>\n        </tr>\n      ))\n    ) : (\n      <tr>\n        <td colSpan={3}>&nbsp;</td>\n      </tr>\n    );\n\n  return (\n    <table  className=\"informationTable\">\n      <thead>\n        <tr>\n          <th >First name</th>\n          <th >Last name</th>\n          <th >Phone</th>\n        </tr>\n      </thead>\n      <tbody>{display}</tbody>\n    </table>\n  );\n}\n\nfunction Application(props) {\n  const usersObj = [];\n\n  const [users, setUsers] = useState(usersObj);\n\n  const addUser = (user) => {\n    user.id = users.length + 1;\n    setUsers([...users, user]);\n  };\n\n  return (\n    <section>\n      <PhoneBookForm addUser={addUser} />\n      <InformationTable users={users} />\n    </section>\n  );\n}\n\nReactDOM.render(<Application />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}